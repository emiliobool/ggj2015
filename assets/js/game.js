// Generated by CoffeeScript 1.8.0
(function() {
  var CreditsState, FightMenu, FightScene, FightState, Game, Hero, MapState,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CreditsState = (function(_super) {
    __extends(CreditsState, _super);

    function CreditsState() {
      this.progress = 0;
      this.progress_events = [];
    }

    CreditsState.prototype.startMusic = function() {
      this.music.volume = 0.7;
      return this.music.fadeIn(3000);
    };

    CreditsState.prototype.create = function() {
      var creditsText;
      creditsText = this.game.cache.getText('creditstext');
      this.creditsSprite = this.game.add.text(0, 0, creditsText, {
        font: '16px VT323',
        fill: '#FFFFFF'
      });
      this.creditsSprite.y = this.game.height;
      this.creditsSprite.x = 20;
      this.images_group = this.game.add.group();
      this.game.world.bringToTop(this.creditsSprite);
      this.music = this.game.add.audio('credits_music');
      this.music.onDecoded.add(this.startMusic, this);
      this.runAtProgress(-0.1, (function(_this) {
        return function() {
          var credits_image;
          credits_image = _this.images_group.create(243, 30, 'credits0');
          credits_image.alpha = 0;
          return _this.game.add.tween(credits_image).to({
            alpha: 1
          }, 10, "Power0", false, 0).to({
            alpha: 0
          }, 3000, "Power0", false, 4000).start();
        };
      })(this));
      this.runAtProgress(0.014285714285714277, (function(_this) {
        return function() {
          var credits_image;
          credits_image = _this.images_group.create(243, 30, 'credits1');
          credits_image.alpha = 0;
          return _this.game.add.tween(credits_image).to({
            alpha: 1
          }, 3000, "Power0", false, 0).to({
            alpha: 0
          }, 3000, "Power0", false, 4000).start();
        };
      })(this));
      this.runAtProgress(0.12857142857142856, (function(_this) {
        return function() {
          var credits_image;
          credits_image = _this.images_group.create(243, 30, 'credits2');
          credits_image.alpha = 0;
          return _this.game.add.tween(credits_image).to({
            alpha: 1
          }, 3000, "Power0", false, 0).to({
            alpha: 0
          }, 3000, "Power0", false, 4000).start();
        };
      })(this));
      this.runAtProgress(0.24285714285714285, (function(_this) {
        return function() {
          var credits_image;
          credits_image = _this.images_group.create(243, 30, 'credits3');
          credits_image.alpha = 0;
          return _this.game.add.tween(credits_image).to({
            alpha: 1
          }, 3000, "Power0", false, 0).to({
            alpha: 0
          }, 3000, "Power0", false, 4000).start();
        };
      })(this));
      this.runAtProgress(0.3571428571428571, (function(_this) {
        return function() {
          var credits_image;
          credits_image = _this.images_group.create(243, 30, 'credits4');
          credits_image.alpha = 0;
          return _this.game.add.tween(credits_image).to({
            alpha: 1
          }, 3000, "Power0", false, 0).to({
            alpha: 0
          }, 3000, "Power0", false, 4000).start();
        };
      })(this));
      this.runAtProgress(0.4714285714285714, (function(_this) {
        return function() {
          var credits_image;
          credits_image = _this.images_group.create(243, 30, 'credits5');
          credits_image.alpha = 0;
          return _this.game.add.tween(credits_image).to({
            alpha: 1
          }, 3000, "Power0", false, 0).to({
            alpha: 0
          }, 3000, "Power0", false, 4000).start();
        };
      })(this));
      this.runAtProgress(0.5857142857142857, (function(_this) {
        return function() {
          var credits_image;
          credits_image = _this.images_group.create(243, 30, 'credits6');
          credits_image.alpha = 0;
          return _this.game.add.tween(credits_image).to({
            alpha: 1
          }, 3000, "Power0", false, 0).to({
            alpha: 0
          }, 3000, "Power0", false, 4000).start();
        };
      })(this));
      this.runAtProgress(0.7, (function(_this) {
        return function() {
          var credits_image;
          credits_image = _this.images_group.create(243, 30, 'credits7');
          credits_image.alpha = 0;
          return _this.game.add.tween(credits_image).to({
            alpha: 1
          }, 3000, "Power0", false, 0).to({
            alpha: 0
          }, 3000, "Power0", false, 4000).start();
        };
      })(this));
      this.runAtProgress(0.95, (function(_this) {
        return function() {
          var theEnd;
          theEnd = _this.game.add.text(0, 0, 'The End', {
            font: '60px VT323',
            fill: '#FFFFFF',
            align: 'center'
          });
          theEnd.y = _this.game.height;
          theEnd.x = _this.game.width / 2;
          theEnd.alpha = 1;
          theEnd.anchor.set(0.5);
          return _this.game.add.tween(theEnd).to({
            y: _this.game.height / 2
          }, 4000).to({
            alpha: 0.5
          }, 2000).start();
        };
      })(this));
      return this.runAtProgress(1.05, (function(_this) {
        return function() {
          return _this.game.state.start('mapState');
        };
      })(this));
    };

    CreditsState.prototype.runAtProgress = function(progress, callback) {
      return this.progress_events.push([progress, true, callback]);
    };

    CreditsState.prototype.fireProgressEvents = function() {
      var event, _i, _len, _ref, _results;
      _ref = this.progress_events;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        event = _ref[_i];
        if (event[1] && event[0] <= this.progress) {
          event[1] = false;
          _results.push(event[2]());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    CreditsState.prototype.update = function() {
      this.creditsSprite.y--;
      this.progress = 1 - (this.creditsSprite.height + this.creditsSprite.y) / this.creditsSprite.height;
      return this.fireProgressEvents();
    };

    return CreditsState;

  })(Phaser.State);

  FightMenu = (function() {
    function FightMenu(game) {
      this.game = game;
      this.onProceed = function() {};
      this.style = {
        font: '23px VT323',
        fill: '#FFFFFF',
        shadow: 4
      };
      this.texts = [];
      this.keys = this.game.input.keyboard.createCursorKeys();
      this.keys.A = this.game.input.keyboard.addKey(Phaser.Keyboard.A);
      this.keys.up.onDown.add(this.keyUp, this);
      this.keys.down.onDown.add(this.keyDown, this);
      this.keys.left.onDown.add(this.keyLeft, this);
      this.keys.right.onDown.add(this.keyRight, this);
      this.keys.A = this.game.input.keyboard.addKey(Phaser.Keyboard.A);
      this.keys.A.onDown.add(this.keyA, this);
      this.keys.Z = this.game.input.keyboard.addKey(Phaser.Keyboard.Z);
      this.keys.Z.onDown.add(this.keyA, this);
      this.cursor = [0, 0];
      this.audio_menu_cursor = game.add.audio('menu_cursor');
      this.audio_menu_disabled = game.add.audio('menu_disabled');
      this.audio_menu_cursor.volume = 0.5;
      this.audio_menu_disabled.volume = 0.5;
      this.sprite_bg = this.game.add.sprite(0, 192, 'fightmenu');
      this.cursor_text = this.game.add.text(0, 0, '>', this.style);
      this.cursor_text.setShadow(2, 2, 'rgba(0,0,0,0.9)', 0);
      this.setMainMode();
    }

    FightMenu.prototype.fadeOut = function(callback) {
      var text, _i, _len, _ref, _results;
      this.game.add.tween(this.sprite_bg).to({
        alpha: 0
      }, 6000, "Power0").start();
      this.game.add.tween(this.cursor_text).to({
        alpha: 0
      }, 6000, "Power0").start();
      _ref = this.texts;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        text = _ref[_i];
        _results.push(this.game.add.tween(text).to({
          alpha: 0
        }, 6000, "Power0").start());
      }
      return _results;
    };

    FightMenu.prototype.addText = function(x, y, text) {
      var textSprite;
      textSprite = this.game.add.text(x, y, text, this.style);
      textSprite.setShadow(2, 2, 'rgba(0,0,0,0.9)', 0);
      return this.texts.push(textSprite);
    };

    FightMenu.prototype.clearText = function() {
      var text, _i, _len, _ref;
      _ref = this.texts;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        text = _ref[_i];
        this.removeText(text);
      }
      return this.texts = [];
    };

    FightMenu.prototype.removeText = function(text) {
      return text.destroy();
    };

    FightMenu.prototype.keyUp = function() {
      this.cursor[1]--;
      if (this.cursor[1] < 0) {
        this.cursor[1] = 0;
        return this.actionDisabled();
      } else {
        return this.cusorMoved();
      }
    };

    FightMenu.prototype.keyDown = function() {
      this.cursor[1]++;
      if (this.cursor[1] > 2) {
        this.cursor[1] = 2;
        return this.actionDisabled();
      } else {
        return this.cusorMoved();
      }
    };

    FightMenu.prototype.keyLeft = function() {
      if (this.mode === "main") {
        this.actionDisabled();
        return;
      }
      this.cursor[0]--;
      if (this.cursor[0] < 0) {
        this.cursor[0] = 0;
        if (this.mode !== "main") {
          return this.setMainMode();
        } else {
          return this.actionDisabled();
        }
      } else {
        return this.cusorMoved();
      }
    };

    FightMenu.prototype.keyRight = function() {
      if (this.mode === "main") {
        this.actionDisabled();
        return;
      }
      this.cursor[0]++;
      if (this.cursor[0] > 2) {
        this.cursor[0] = 2;
        return this.actionDisabled();
      } else {
        return this.cusorMoved();
      }
    };

    FightMenu.prototype.keyA = function() {
      switch (this.mode) {
        case "main":
          switch (this.cursor[1]) {
            case 0:
              return this.action();
            case 1:
              return this.setMagicMode();
            case 2:
              return this.setItemsMode();
          }
          break;
        case "magic":
          return this.actionDisabled();
        case "items":
          return this.actionDisabled();
      }
    };

    FightMenu.prototype.createMainText = function() {
      this.addText(45, 220, "Attack");
      this.addText(45, 265, "Magic");
      this.addText(45, 310, "Items");
      this.addText(190, 220, "Rick");
      this.addText(190, 265, "George");
      this.addText(190, 310, "Sakura");
      this.addText(320, 220, "HP 189/1450");
      this.addText(320, 265, "HP 0/2390");
      this.addText(320, 310, "HP 0/1100");
      this.addText(480, 220, "MP 2/78 ");
      this.addText(480, 265, "MP 19/33");
      return this.addText(480, 310, "MP 89/182");
    };

    FightMenu.prototype.createMagicText = function() {
      this.clearText();
      this.addText(45, 220, "Attack");
      this.addText(45, 265, "Magic");
      this.addText(45, 310, "Items");
      this.addText(190, 220, "Omega Blast");
      this.addText(190, 265, "Thunder Strike");
      this.addText(190, 310, "Band-aid");
      this.addText(380, 220, "Omega Blast");
      this.addText(380, 265, "Thunder Strike");
      return this.addText(380, 310, "Band-aid");
    };

    FightMenu.prototype.createItemsText = function() {
      this.clearText();
      this.addText(45, 220, "Attack");
      this.addText(45, 265, "Magic");
      this.addText(45, 310, "Items");
      this.addText(190, 220, "Potion");
      this.addText(190, 265, "Ether");
      return this.addText(190, 310, "Elixir");
    };

    FightMenu.prototype.setMainMode = function() {
      this.mode = "main";
      this.clearText();
      this.createMainText();
      this.cursor = [0, 0];
      return this.updateCursor();
    };

    FightMenu.prototype.setMagicMode = function() {
      this.mode = "magic";
      this.clearText();
      this.createMagicText();
      this.cursor = [0, 0];
      return this.updateCursor();
    };

    FightMenu.prototype.setItemsMode = function() {
      this.mode = "items";
      this.clearText();
      this.createItemsText();
      this.cursor = [0, 0];
      return this.updateCursor();
    };

    FightMenu.prototype.action = function() {
      this.cursor_text.alpha = 0;
      this.game.input.keyboard.reset(true);
      this.audio_menu_cursor.play();
      return this.onProceed();
    };

    FightMenu.prototype.actionDisabled = function() {
      return this.audio_menu_disabled.play();
    };

    FightMenu.prototype.cusorMoved = function() {
      this.audio_menu_cursor.play();
      return this.updateCursor();
    };

    FightMenu.prototype.updateCursor = function() {
      switch (this.mode) {
        case "main":
          this.cursor_text.x = 20;
          return this.cursor_text.y = 220 + this.cursor[1] * 45;
        case "magic":
          this.cursor_text.x = 170 + this.cursor[0] * 190;
          return this.cursor_text.y = 220 + this.cursor[1] * 45;
        case "items":
          this.cursor_text.x = 170 + this.cursor[0] * 190;
          return this.cursor_text.y = 220 + this.cursor[1] * 45;
      }
    };

    FightMenu.prototype.update = function() {};

    return FightMenu;

  })();

  FightScene = (function() {
    function FightScene(game) {
      this.game = game;
      this.group = this.game.add.group();
      this.sprite_bg = this.group.create(0, 0, 'fightbg');
      this.dragon = this.group.create(80, 0, 'fightboss');
      this.hero = this.group.create(400, 70, 'player');
      this.hero.frame = 15;
      this.hero2 = this.group.create(430, 110, 'player');
      this.hero2.frame = 13;
      this.hero3 = this.group.create(460, 150, 'player');
      this.hero3.frame = 18;
      this.music = this.game.add.audio('boss_battle');
      this.music.onDecoded.add(this.startMusic, this);
    }

    FightScene.prototype.startMusic = function() {
      this.music.volume = 0.7;
      return this.music.play('', 0, 1, true);
    };

    FightScene.prototype.killBoss = function() {
      var boss_death, tween;
      this.music.stop();
      this.filter = this.game.add.filter('Fire', this.game.width, this.game.height, 0.5);
      this.filter.alpha = 0.5;
      this.sprite_bg.filters = [this.filter];
      boss_death = this.game.add.audio('boss_death');
      boss_death.play();
      tween = this.game.add.tween(this.dragon).to({
        alpha: 0
      }, 6000, "Power0").start();
      return tween.onComplete.add((function(_this) {
        return function() {
          _this.sprite_bg.destroy();
          return _this.onBossKilled();
        };
      })(this));
    };

    FightScene.prototype.fadeOut = function(callback) {
      var tween;
      tween = this.game.add.tween(this.group).to({
        alpha: 0
      }, 6000, "Power0").start();
      return tween.onComplete.add(function() {
        return callback();
      });
    };

    FightScene.prototype.update = function() {
      if (this.filter) {
        return this.filter.update();
      }
    };

    return FightScene;

  })();

  FightState = (function(_super) {
    __extends(FightState, _super);

    function FightState(game) {
      this.game = game;
      null;
    }

    FightState.prototype.create = function() {
      this.fightScene = new FightScene(this.game);
      this.fightMenu = new FightMenu(this.game);
      this.fightMenu.onProceed = (function(_this) {
        return function() {
          return _this.fightScene.killBoss();
        };
      })(this);
      return this.fightScene.onBossKilled = (function(_this) {
        return function() {
          return _this.fadeOut();
        };
      })(this);
    };

    FightState.prototype.fadeOut = function() {
      this.fightMenu.fadeOut();
      return this.fightScene.fadeOut((function(_this) {
        return function() {
          return _this.game.time.events.add(Phaser.Timer.SECOND * 3, function() {
            return _this.game.state.start('creditsState');
          });
        };
      })(this));
    };

    FightState.prototype.update = function() {
      if (this.fightMenu) {
        this.fightMenu.update();
      }
      if (this.fightScene) {
        return this.fightScene.update();
      }
    };

    return FightState;

  })(Phaser.State);

  Game = (function(_super) {
    __extends(Game, _super);

    function Game() {
      var game;
      game = new Phaser.Game(640, 360, Phaser.AUTO, 'game', this);
      this.assets_loaded = false;
      this.gfonts_loaded = false;
      window.fullscreen = (function(_this) {
        return function() {
          return _this.fullscreen();
        };
      })(this);
      window.mute = (function(_this) {
        return function() {
          return _this.mute();
        };
      })(this);
    }

    Game.prototype.loadStart = function() {
      this.loadingText = this.game.add.text(this.game.world.centerX, this.game.world.centerY, 'Loading...', {
        fill: '#ffffff',
        align: 'center'
      });
      return this.loadingText.anchor.set(0.5);
    };

    Game.prototype.loadComplete = function() {
      this.loadingText.setText("Load Complete");
      this.assets_loaded = true;
      if (this.game.state.current === "default") {
        return this.create();
      }
    };

    Game.prototype.preload = function() {
      this.game.load.onLoadStart.add(this.loadStart, this);
      this.game.stage.disableVisibilityChange = true;
      this.game.load.onLoadComplete.add(this.loadComplete, this);
      this.game.load.tilemap('map', 'assets/tilemaps/csv/map.csv', null, Phaser.Tilemap.CSV);
      this.game.load.image('tiles', 'assets/tilemaps/tiles/Outside_A2.png');
      this.game.load.image('fightbg', 'assets/bg/bg.png');
      this.game.load.image('fightboss', 'assets/sprites/dragon.png');
      this.game.load.image('fightmenu', 'assets/bg/menu3.png');
      this.game.load.image('credits0', 'assets/credits/images/0.png');
      this.game.load.image('credits1', 'assets/credits/images/1.png');
      this.game.load.image('credits2', 'assets/credits/images/2.png');
      this.game.load.image('credits3', 'assets/credits/images/3.png');
      this.game.load.image('credits4', 'assets/credits/images/4.png');
      this.game.load.image('credits5', 'assets/credits/images/5.png');
      this.game.load.image('credits6', 'assets/credits/images/6.png');
      this.game.load.image('credits7', 'assets/credits/images/7.png');
      this.game.load.text('creditstext', 'assets/credits/text/credits.txt');
      this.game.load.spritesheet('special', 'assets/sprites/Special2.png', 192, 192);
      this.game.load.spritesheet('player', 'assets/sprites/characters.png', 32, 32);
      this.game.load.spritesheet('button', 'assets/buttons/button_sprite_sheet.png', 193, 71);
      this.game.load.audio('menu_cursor', 'assets/audio/Blip_Select35.wav');
      this.game.load.audio('menu_disabled', 'assets/audio/menu_disabled.wav');
      this.game.load.audio('credits_music', 'assets/audio/halaware.mp3');
      this.game.load.audio('boss_death', 'assets/audio/Randomize25.wav');
      this.game.load.audio('boss_battle', 'assets/audio/Battle7.ogg');
      this.game.load.script('filter', 'https://cdn.rawgit.com/photonstorm/phaser/master/filters/Fire.js');
      this.game.scale.fullScreenScaleMode = Phaser.ScaleManager.SHOW_ALL;
      this.game.state.add('fightState', new FightState);
      this.game.state.add('creditsState', new CreditsState);
      this.game.state.add('mapState', new MapState);
      return WebFont.load({
        active: (function(_this) {
          return function() {
            _this.gfonts_loaded = true;
            return _this.create();
          };
        })(this),
        google: {
          families: ['VT323::latin']
        }
      });
    };

    Game.prototype.create = function() {
      if (this.assets_loaded && this.gfonts_loaded && this.game.state.current === "default") {
        return this.game.state.start('fightState');
      }
    };

    Game.prototype.update = function() {};

    Game.prototype.render = function() {};

    Game.prototype.mute = function() {
      return this.game.sound.mute = !this.game.sound.mute;
    };

    Game.prototype.fullscreen = function() {
      if (this.game.scale.isFullScreen) {
        return this.game.scale.stopFullScreen();
      } else {
        return this.game.scale.startFullScreen(false);
      }
    };

    return Game;

  })(Phaser.State);

  window.onload = function() {
    return new Game;
  };

  Hero = (function(_super) {
    __extends(Hero, _super);

    function Hero(game) {
      this.game = game;
      Hero.__super__.constructor.call(this, this.game, 1920, 1500, 'player', 1);
      this.game.add.existing(this);
      this.game.physics.enable(this, Phaser.Physics.ARCADE);
      this.body.setSize(28, 28, 2, 4);
      this.animations.add('left', [12, 13, 14], 10, true);
      this.animations.add('right', [24, 25, 26], 10, true);
      this.animations.add('up', [36, 37, 38], 10, true);
      this.animations.add('down', [0, 1, 2], 10, true);
      this.cursors = this.game.input.keyboard.createCursorKeys();
    }

    Hero.prototype.update = function() {
      var play;
      this.body.velocity.set(0);
      play = 'stop';
      if (this.cursors.left.isDown) {
        this.body.velocity.x = -100;
        play = 'left';
      }
      if (this.cursors.right.isDown) {
        this.body.velocity.x = 100;
        play = 'right';
      }
      if (this.cursors.up.isDown) {
        this.body.velocity.y = -100;
        play = 'up';
      }
      if (this.cursors.down.isDown) {
        this.body.velocity.y = 100;
        play = 'down';
      }
      if (play === 'stop') {
        this.animations.stop();
      } else {
        this.play(play);
      }
      return null;
    };

    return Hero;

  })(Phaser.Sprite);

  MapState = (function(_super) {
    __extends(MapState, _super);

    function MapState() {}

    MapState.prototype.create = function() {
      this.map = this.game.add.tilemap('map', 32, 32);
      this.map.addTilesetImage('tiles');
      this.layer = this.map.createLayer(0);
      this.layer.resizeWorld();
      this.layer.debug = true;
      this.player = new Hero(this.game);
      this.player.anchor.set(0.5);
      this.game.camera.follow(this.player);
      this.layer.alpha = 0;
      this.player.alpha = 0;
      this.theEnd = this.game.add.text(0, 0, 'The End', {
        font: '60px VT323',
        fill: '#FFFFFF',
        align: 'center'
      });
      this.theEnd.y = this.game.height / 2;
      this.theEnd.x = this.game.width / 2;
      this.theEnd.fixedToCamera = true;
      this.theEnd.alpha = 0.5;
      this.theEnd.anchor.set(0.5);
      return this.fadeIn();
    };

    MapState.prototype.update = function() {
      this.game.physics.arcade.collide(this.player, this.layer);
      return this.player.update();
    };

    MapState.prototype.fadedIn = function() {};

    MapState.prototype.fadeIn = function() {
      var tween;
      tween = this.game.add.tween(this.layer).to({
        alpha: 1
      }, 2500, "Power0").start();
      tween.onComplete.add((function(_this) {
        return function() {
          return _this.fadedIn();
        };
      })(this));
      return this.game.add.tween(this.player).to({
        alpha: 1
      }, 2500, "Power0").start();
    };

    MapState.prototype.shutdown = function() {
      this.player.destroy();
      this.layer.destroy();
      return this.map.destroy();
    };

    return MapState;

  })(Phaser.State);

}).call(this);
