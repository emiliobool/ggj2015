// Generated by CoffeeScript 1.8.0
(function() {
  var CreditsState, FightMenu, FightScene, FightState, Game, Hero, MapState,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CreditsState = (function(_super) {
    __extends(CreditsState, _super);

    function CreditsState(game) {
      this.game = game;
    }

    CreditsState.prototype.update = function() {};

    return CreditsState;

  })(Phaser.State);

  FightMenu = (function() {
    function FightMenu(game) {
      var attack, h1hpmp, h2hpmp, h3hpmp, hero1, hero2, hero3, items, magic, style;
      this.game = game;
      this.cursors = this.game.input.keyboard.createCursorKeys();
      this.sprite_bg = this.game.add.sprite(0, 192, 'fightmenu');
      style = {
        font: '23px VT323',
        fill: '#FFFFFF',
        shadow: 4
      };
      attack = this.game.add.text(40, 220, "Attack", style);
      attack.setShadow(2, 2, 'rgba(0,0,0,0.9)', 0);
      magic = this.game.add.text(40, 260, "Magic", style);
      magic.setShadow(2, 2, 'rgba(0,0,0,0.9)', 0);
      items = this.game.add.text(40, 300, "Items", style);
      items.setShadow(2, 2, 'rgba(0,0,0,0.9)', 0);
      hero1 = this.game.add.text(270, 220, "Hero", style);
      hero1.setShadow(2, 2, 'rgba(0,0,0,0.9)', 0);
      hero2 = this.game.add.text(270, 260, "Hero 2", style);
      hero2.setShadow(2, 2, 'rgba(0,0,0,0.9)', 0);
      hero3 = this.game.add.text(270, 300, "Hero 3", style);
      hero3.setShadow(2, 2, 'rgba(0,0,0,0.9)', 0);
      h1hpmp = this.game.add.text(390, 220, "189/1300 HP   2/78 MP", style);
      h1hpmp.setShadow(2, 2, 'rgba(0,0,0,0.9)', 0);
      h2hpmp = this.game.add.text(390, 260, "189/1300 HP   2/78 MP", style);
      h2hpmp.setShadow(2, 2, 'rgba(0,0,0,0.9)', 0);
      h3hpmp = this.game.add.text(390, 300, "189/1300 HP   2/78 MP", style);
      h3hpmp.setShadow(2, 2, 'rgba(0,0,0,0.9)', 0);
    }

    FightMenu.prototype.update = function() {
      if (this.cursors.down.isDown) {
        return this.game.state.start('mapState');
      }
    };

    return FightMenu;

  })();

  FightScene = (function() {
    function FightScene(game) {
      this.game = game;
      this.sprite_bg = this.game.add.sprite(0, 0, 'fightbg');
      this.dragon = this.game.add.sprite(80, 0, 'fightboss');
      this.hero = this.game.add.sprite(400, 70, 'player');
      this.hero2 = this.game.add.sprite(430, 110, 'player');
      this.hero3 = this.game.add.sprite(460, 150, 'player');
    }

    return FightScene;

  })();

  FightState = (function(_super) {
    __extends(FightState, _super);

    function FightState(game) {
      this.game = game;
      null;
    }

    FightState.prototype.create = function() {
      console.log('here');
      this.fightScene = new FightScene(this.game);
      return this.fightMenu = new FightMenu(this.game);
    };

    FightState.prototype.update = function() {
      return this.fightMenu.update();
    };

    return FightState;

  })(Phaser.State);

  Game = (function() {
    var self;

    self = null;

    function Game() {
      self = this;
      self.game = new Phaser.Game(640, 360, Phaser.AUTO, 'game', {
        preload: this.preload,
        create: this.create,
        update: this.update,
        render: this.render
      });
    }

    Game.prototype.preload = function() {
      self.game.load.tilemap('map', 'assets/tilemaps/csv/catastrophi_level2.csv', null, Phaser.Tilemap.CSV);
      self.game.load.image('tiles', 'assets/tilemaps/tiles/catastrophi_tiles_16.png');
      self.game.load.image('fightbg', 'assets/bg/bg.png');
      self.game.load.image('fightboss', 'assets/sprites/dragon.png');
      self.game.load.image('fightmenu', 'assets/bg/menu2.png');
      self.game.load.spritesheet('player', 'assets/sprites/artemis.png', 32, 32);
      return self.game.load.spritesheet('button', 'assets/buttons/button_sprite_sheet.png', 193, 71);
    };

    Game.prototype.create = function() {
      self.game.scale.fullScreenScaleMode = Phaser.ScaleManager.SHOW_ALL;
      self.game.state.add('fightState', new FightState, true);
      self.game.state.add('creditsState', new CreditsState);
      self.game.state.add('mapState', new MapState);
      return self.game.add.button(self.game.world.Width - 100, 0, 'button', self.fullscreen, this, 2, 1, 0);
    };

    Game.prototype.update = function() {};

    Game.prototype.render = function() {};

    Game.prototype.fullscreen = function() {
      if (self.game.scale.isFullScreen) {
        return self.game.scale.stopFullScreen();
      } else {
        return self.game.scale.startFullScreen(false);
      }
    };

    return Game;

  })();

  window.onload = function() {
    return new Game;
  };

  Hero = (function(_super) {
    __extends(Hero, _super);

    function Hero(game) {
      this.game = game;
      Hero.__super__.constructor.call(this, this.game, 48, 48, 'player', 1);
      this.game.add.existing(this);
      this.game.physics.enable(this, Phaser.Physics.ARCADE);
      this.body.setSize(28, 28, 2, 4);
      this.animations.add('left', [12, 13, 14], 10, true);
      this.animations.add('right', [24, 25, 26], 10, true);
      this.animations.add('up', [36, 37, 38], 10, true);
      this.animations.add('down', [0, 1, 2], 10, true);
      this.cursors = this.game.input.keyboard.createCursorKeys();
    }

    Hero.prototype.update = function() {
      var play;
      this.body.velocity.set(0);
      play = 'stop';
      if (this.cursors.left.isDown) {
        this.body.velocity.x = -100;
        play = 'left';
      }
      if (this.cursors.right.isDown) {
        this.body.velocity.x = 100;
        play = 'right';
      }
      if (this.cursors.up.isDown) {
        this.body.velocity.y = -100;
        play = 'up';
      }
      if (this.cursors.down.isDown) {
        this.body.velocity.y = 100;
        play = 'down';
      }
      if (play === 'stop') {
        this.animations.stop();
      } else {
        this.play(play);
      }
      return null;
    };

    return Hero;

  })(Phaser.Sprite);

  MapState = (function(_super) {
    __extends(MapState, _super);

    function MapState() {}

    MapState.prototype.create = function() {
      this.map = this.game.add.tilemap('map', 32, 32);
      this.map.addTilesetImage('tiles');
      this.map.setCollisionBetween(54, 83);
      this.layer = this.map.createLayer(0);
      this.layer.resizeWorld();
      this.layer.debug = true;
      this.player = new Hero(this.game);
      return this.game.camera.follow(this.player);
    };

    MapState.prototype.update = function() {
      this.game.physics.arcade.collide(this.player, this.layer);
      return this.player.update();
    };

    MapState.prototype.shutdown = function() {
      this.player.destroy();
      this.layer.destroy();
      return this.map.destroy();
    };

    return MapState;

  })(Phaser.State);

}).call(this);
